<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Seventysix&#39;s blog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-02-02T13:10:03.000Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Seventysix</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Flask源码阅读之Werkzeug</title>
    <link href="http://example.com/2023/01/30/Flask%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E4%B9%8BWerkzeug/"/>
    <id>http://example.com/2023/01/30/Flask%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E4%B9%8BWerkzeug/</id>
    <published>2023-01-30T13:10:03.000Z</published>
    <updated>2023-02-02T13:10:03.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a class="markdownIt-Anchor" href="#概述"></a> 概述</h2><p>Flask核心功能依赖于两个库：Jinja和Werkzeug。前者作为Flask的模版（Template）引擎，提供了Flask创建模版以及相关功能的支持；后者作为一个wsgi工具库，为Flask实现核心功能提供了支持。本文主要通过对Flask源码的阅读，学习下其核心功能是如何实现的，以及Werkzeug起到了一个什么作用。</p><h2 id="flask应用启动"><a class="markdownIt-Anchor" href="#flask应用启动"></a> Flask应用启动</h2><p>Flask官方建议在生产环境中，不要使用其自带的wsgi，因为并不保证安全和性能。但我们还是从启动开始研究Werkzeug的作用。</p><p>一个简单的Flask应用可能是这样的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span></span>)  </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():  </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Test succeed.&quot;</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:  </span><br><span class="line">    app.run(host=<span class="string">&quot;0.0.0.0&quot;</span>, port=<span class="number">76</span>)</span><br></pre></td></tr></table></figure><p>我们查看app.run内部，在其处理完参数之后，核心就是以下几句，调用werkzeug.serving模块的run_simple：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> werkzeug.serving <span class="keyword">import</span> run_simple  </span><br><span class="line"><span class="keyword">try</span>:  </span><br><span class="line">    run_simple(t.cast(<span class="built_in">str</span>, host), port, self, **options)  </span><br><span class="line"><span class="keyword">finally</span>:  </span><br><span class="line">    self._got_first_request = <span class="literal">False</span></span><br></pre></td></tr></table></figure><p>我们来看下传进去的几个参数：</p><ul><li>t.cast(str, host)：调用typing.cast(typ, val)把host转成字符串类型；</li><li>port：服务占用的端口；</li><li>self：即app本身，我们用Flask()创建的Application；</li><li>options：可选项字典，例如是否是debug模式等等。</li></ul><p>继续查看run_simple的内部，我们发现如果设置<code>debug=true</code>时，会将app转换成DebuggedApplication，并且会使用run_with_reloader运行通过make_server()函数构造的server；如果不是debug执行，则直接执行server。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">run_simple</span>(<span class="params">hostname, port, application, use_reloader = <span class="literal">False</span>, use_debugger = <span class="literal">False</span>, ...</span>):</span><br><span class="line">...省略部分代码...</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> use_debugger:  </span><br><span class="line">    <span class="keyword">from</span> .debug <span class="keyword">import</span> DebuggedApplication  </span><br><span class="line">    application = DebuggedApplication(application, evalex=use_evalex)</span><br><span class="line"></span><br><span class="line">...省略部分代码...</span><br><span class="line"></span><br><span class="line">srv = make_server(hostname, port, application, threaded, processes, request_handler, passthrough_errors, ssl_context, fd=fd,)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> is_running_from_reloader():  </span><br><span class="line">    srv.log_startup()  </span><br><span class="line">    _log(<span class="string">&quot;info&quot;</span>, _ansi_style(<span class="string">&quot;Press CTRL+C to quit&quot;</span>, <span class="string">&quot;yellow&quot;</span>))  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">if</span> use_reloader:  </span><br><span class="line">    <span class="keyword">from</span> ._reloader <span class="keyword">import</span> run_with_reloader  </span><br><span class="line">    run_with_reloader(  </span><br><span class="line">        srv.serve_forever,  </span><br><span class="line">        extra_files=extra_files,  </span><br><span class="line">        exclude_patterns=exclude_patterns,  </span><br><span class="line">        interval=reloader_interval,  </span><br><span class="line">        reloader_type=reloader_type,  </span><br><span class="line">    )  </span><br><span class="line"><span class="keyword">else</span>:  </span><br><span class="line">    srv.serve_forever()</span><br></pre></td></tr></table></figure><p>DebuggedApplication就是将我们构造的Application封装了一层，提供了对Application进行调试的支持。当我们应用内部运行出错时会显示出一个错误页面，展示发生错误时那帧的traceback，大致如下图：</p><div align=center><img src="https://i.328888.xyz/2023/01/31/8GNp5.md.png" /></div><p>在看run_with_reloader之前，先看一下make_server函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">make_server</span>(<span class="params">host, port, app, threaded = <span class="literal">False</span>, processes = <span class="number">1</span>, request_handler = <span class="literal">None</span>, passthrough_errors = <span class="literal">False</span>, ssl_context = <span class="literal">None</span>, fd = <span class="literal">None</span>,</span>)：</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> threaded <span class="keyword">and</span> processes &gt; <span class="number">1</span>:  </span><br><span class="line">    <span class="keyword">raise</span> ValueError(<span class="string">&quot;Cannot have a multi-thread and multi-process server.&quot;</span>)  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">if</span> threaded:  </span><br><span class="line">    <span class="keyword">return</span> ThreadedWSGIServer(host, port, app, request_handler, passthrough_errors, ssl_context, fd=fd)  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">if</span> processes &gt; <span class="number">1</span>:  </span><br><span class="line">    <span class="keyword">return</span> ForkingWSGIServer(host,port,app,processes,request_handler,passthrough_errors,ssl_context,fd=fd,)  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">return</span> BaseWSGIServer(host, port, app, request_handler, passthrough_errors, ssl_context, fd=fd)</span><br></pre></td></tr></table></figure><p>该函数会根据传入的参数，决定返回多进程Server、多线程Server还是基础的Server，默认会返回一个基础Server。其中ThreadedWSGIServer、ForkingWSGIServer都是BaseWSGIServer的子类，BaseWSGIServer是HTTPServer的子类。</p><p>run_with_reloader这部分会用一个线程执行srv.serve_forever()，另一个线程来启动一个ReloaderLoop对象，这个对象会按设定的interval去遍历一遍项目文件，查看当前文件是否有修改，如果有则重新reload一遍。</p><p>而srv.serve_forever()则是直接使用的HTTPServer父类BaseServer的方法serve_forever()。</p><h2 id="flask路由"><a class="markdownIt-Anchor" href="#flask路由"></a> Flask路由</h2><h3 id="路由添加"><a class="markdownIt-Anchor" href="#路由添加"></a> 路由添加</h3><p>继续使用上一节中的简单Flask应用，我们用装饰器函数<code>@app.route(&quot;/&quot;)</code> 来添加了一个路由，我们查看route函数内部，发现其实际调用了Flask.add_url_rule函数来进行路由的添加：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">route</span>(<span class="params">self, rule: <span class="built_in">str</span>, **options: t.<span class="type">Any</span></span>) -&gt; t.<span class="type">Callable</span>[[T_route], T_route]:</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decorator</span>(<span class="params">f: T_route</span>) -&gt; T_route:  </span><br><span class="line">    endpoint = options.pop(<span class="string">&quot;endpoint&quot;</span>, <span class="literal">None</span>)  </span><br><span class="line">    self.add_url_rule(rule, endpoint, f, **options)  </span><br><span class="line">    <span class="keyword">return</span> f  </span><br><span class="line"><span class="keyword">return</span> decorator</span><br></pre></td></tr></table></figure><p>我们继续查看Flask.add_url_rule函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add_url_rule</span>(<span class="params">self,rule: <span class="built_in">str</span>,endpoint = <span class="literal">None</span>,view_func = <span class="literal">None</span>,provide_automatic_options: = <span class="literal">None</span>,**options: t.<span class="type">Any</span>,</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line"></span><br><span class="line">...省略部分代码...</span><br><span class="line"></span><br><span class="line">rule = self.url_rule_class(rule, methods=methods, **options)  </span><br><span class="line">rule.provide_automatic_options = provide_automatic_options  <span class="comment"># type: ignore  </span></span><br><span class="line">  </span><br><span class="line">self.url_map.add(rule)  </span><br><span class="line"><span class="keyword">if</span> view_func <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:  </span><br><span class="line">    old_func = self.view_functions.get(endpoint)  </span><br><span class="line">    <span class="keyword">if</span> old_func <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> old_func != view_func:  </span><br><span class="line">        <span class="keyword">raise</span> AssertionError(  </span><br><span class="line">            <span class="string">&quot;View function mapping is overwriting an existing&quot;</span>  </span><br><span class="line">            <span class="string">f&quot; endpoint function: <span class="subst">&#123;endpoint&#125;</span>&quot;</span>  </span><br><span class="line">        )  </span><br><span class="line">    self.view_functions[endpoint] = view_func</span><br></pre></td></tr></table></figure><p>在这个函数中</p><ol><li>先处理参数；</li><li>然后用werkzeug.routing.rules模块的Rule类创建路由rule对应的实例，并将其加入self.url_map中。self.url_map是werkzeug.routing.map模块的Map类创建的实例；</li><li>最后将这个路由对应的方法加入self.view_functions字典中，其key则为endpoint（endpoint默认为路由对应的函数名称）。</li></ol><p>Flask自己添加路由的部分就到此为止了，后续的路由解析、匹配等重要功能还是依托于werkzeug.routing.map模块的Map类，我们先看Map内是如何添加一个路由的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Map</span>:</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">self, rulefactory: <span class="string">&quot;RuleFactory&quot;</span></span>) -&gt; <span class="literal">None</span>:     </span><br><span class="line">    <span class="keyword">for</span> rule <span class="keyword">in</span> rulefactory.get_rules(self):  </span><br><span class="line">        rule.bind(self)  </span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> rule.build_only:  </span><br><span class="line">            self._matcher.add(rule)  </span><br><span class="line">        self._rules_by_endpoint.setdefault(rule.endpoint, []).append(rule)  </span><br><span class="line">    self._remap = <span class="literal">True</span></span><br></pre></td></tr></table></figure><p>其实很简单，就是将其Rule实例加入到自己的self._rules_by_endpoint字典中，key为endpoint。</p><h3 id="路由匹配"><a class="markdownIt-Anchor" href="#路由匹配"></a> 路由匹配</h3><p>我们添加路由以后，当一个对应的请求过来之后，Flask内部是如何处理这个请求去找到并执行对应方法的呢？我们通过对Flask这个类的代码进行阅读，梳理出主要流程如下，我们讲讲其中的关键步骤：</p><div align=center><img src="https://i.328888.xyz/2023/02/01/IWUpL.png" /></div><p>Flask在处理请求时，执行到Flask.wsgi_app函数时会创建请求的上下文对象，并将其压栈：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">wsgi_app</span>(<span class="params">self, environ: <span class="built_in">dict</span>, start_response: t.<span class="type">Callable</span></span>) -&gt; t.<span class="type">Any</span>:</span><br><span class="line">ctx = self.request_context(environ)  <span class="comment"># 创建上下文对象</span></span><br><span class="line">error: t.<span class="type">Optional</span>[BaseException] = <span class="literal">None</span>  </span><br><span class="line"><span class="keyword">try</span>:  </span><br><span class="line">    <span class="keyword">try</span>:  </span><br><span class="line">        ctx.push()  <span class="comment"># 压栈</span></span><br><span class="line">        response = self.full_dispatch_request()  </span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:  </span><br><span class="line">        error = e  </span><br><span class="line">        response = self.handle_exception(e)  </span><br><span class="line">    <span class="keyword">except</span>:  <span class="comment"># noqa: B001  </span></span><br><span class="line">        error = sys.exc_info()[<span class="number">1</span>]  </span><br><span class="line">        <span class="keyword">raise</span>  </span><br><span class="line">    <span class="keyword">return</span> response(environ, start_response)  </span><br><span class="line"><span class="keyword">finally</span>:  </span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;werkzeug.debug.preserve_context&quot;</span> <span class="keyword">in</span> environ:  </span><br><span class="line">        environ[<span class="string">&quot;werkzeug.debug.preserve_context&quot;</span>](_cv_app.get())  </span><br><span class="line">        environ[<span class="string">&quot;werkzeug.debug.preserve_context&quot;</span>](_cv_request.get())  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> error <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> self.should_ignore_error(error):  </span><br><span class="line">        error = <span class="literal">None</span>  </span><br><span class="line">  </span><br><span class="line">    ctx.pop(error)</span><br></pre></td></tr></table></figure><p>这个RequestContext对象在初始化时会调用Flask.create_url_adapter，这个函数的主要作用是将self.url_map绑定到WSGI environment上，然后返回一个MapAdapter对象，供我们后续匹配路由。</p><p>而当RequestContext对象被push时会调用match_request，这个函数内会调用MapAdapter.match去匹配当前请求的路由。最后则会执行dispatch_request处理请求：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Flask</span>(<span class="title class_ inherited__">Scaffold</span>):</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dispatch_request</span>(<span class="params">self</span>) -&gt; ft.ResponseReturnValue:</span><br><span class="line">req = request_ctx.request  </span><br><span class="line"><span class="keyword">if</span> req.routing_exception <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:  </span><br><span class="line">    self.raise_routing_exception(req)  </span><br><span class="line">rule: Rule = req.url_rule</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">getattr</span>(rule, <span class="string">&quot;provide_automatic_options&quot;</span>, <span class="literal">False</span>) <span class="keyword">and</span> req.method == <span class="string">&quot;OPTIONS&quot;</span>):  </span><br><span class="line">    <span class="keyword">return</span> self.make_default_options_response()  </span><br><span class="line">view_args: t.<span class="type">Dict</span>[<span class="built_in">str</span>, t.<span class="type">Any</span>] = req.view_args</span><br><span class="line"><span class="keyword">return</span> self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)</span><br></pre></td></tr></table></figure><p>其逻辑还是非常简单易懂的，获取request对象中的路由url_rule和参数view_args，通过url_rule的endpoint去self.view_functions字典中找到对应的视图函数，然后传入参数进行执行。</p><h2 id="flask请求和响应"><a class="markdownIt-Anchor" href="#flask请求和响应"></a> Flask请求和响应</h2><p>还是以这个简单的Flask应用为例，来看看请求和响应：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span></span>)  </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():  </span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;GET&quot;</span>:  </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;A get request.&quot;</span>  </span><br><span class="line"><span class="keyword">elif</span> request.method == <span class="string">&quot;POST&quot;</span>:  </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;A post request.&quot;</span>  </span><br><span class="line"><span class="keyword">else</span>:  </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Test succeed.&quot;</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:  </span><br><span class="line">    app.run(host=<span class="string">&quot;0.0.0.0&quot;</span>, port=<span class="number">76</span>)</span><br></pre></td></tr></table></figure><h3 id="请求"><a class="markdownIt-Anchor" href="#请求"></a> 请求</h3><p>我们一般直接通过import flask.globals里的request单例来获取请求的信息，例如判断请求的类型等等：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">request: <span class="string">&quot;Request&quot;</span> = LocalProxy(  <span class="comment"># type: ignore[assignment]  </span></span><br><span class="line">    _cv_request, <span class="string">&quot;request&quot;</span>, unbound_message=_no_req_msg  </span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>我们查看其代码，位于flask.wrappers模块的Request类，我们发现他本身的代码很简单，主要是添加了一些蓝图、端点等内容。继续查看其父类，位于werkzeug.wrappers.request模块的Request类：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Request</span>(<span class="title class_ inherited__">_SansIORequest</span>):</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">  </span></span><br><span class="line"><span class="params">    self,  </span></span><br><span class="line"><span class="params">    environ: <span class="string">&quot;WSGIEnvironment&quot;</span>,  </span></span><br><span class="line"><span class="params">    populate_request: <span class="built_in">bool</span> = <span class="literal">True</span>,  </span></span><br><span class="line"><span class="params">    shallow: <span class="built_in">bool</span> = <span class="literal">False</span>,  </span></span><br><span class="line"><span class="params"></span>) -&gt; <span class="literal">None</span>:  </span><br><span class="line">    <span class="built_in">super</span>().__init__(  </span><br><span class="line">        method=environ.get(<span class="string">&quot;REQUEST_METHOD&quot;</span>, <span class="string">&quot;GET&quot;</span>),  </span><br><span class="line">        scheme=environ.get(<span class="string">&quot;wsgi.url_scheme&quot;</span>, <span class="string">&quot;http&quot;</span>),  </span><br><span class="line">        server=_get_server(environ),  </span><br><span class="line">        root_path=_wsgi_decoding_dance(  </span><br><span class="line">            environ.get(<span class="string">&quot;SCRIPT_NAME&quot;</span>) <span class="keyword">or</span> <span class="string">&quot;&quot;</span>, self.charset, self.encoding_errors  </span><br><span class="line">        ),  </span><br><span class="line">        path=_wsgi_decoding_dance(  </span><br><span class="line">            environ.get(<span class="string">&quot;PATH_INFO&quot;</span>) <span class="keyword">or</span> <span class="string">&quot;&quot;</span>, self.charset, self.encoding_errors  </span><br><span class="line">        ),  </span><br><span class="line">        query_string=environ.get(<span class="string">&quot;QUERY_STRING&quot;</span>, <span class="string">&quot;&quot;</span>).encode(<span class="string">&quot;latin1&quot;</span>),  </span><br><span class="line">        headers=EnvironHeaders(environ),  </span><br><span class="line">        remote_addr=environ.get(<span class="string">&quot;REMOTE_ADDR&quot;</span>),  </span><br><span class="line">    )  </span><br><span class="line">    self.environ = environ  </span><br><span class="line">    self.shallow = shallow  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> populate_request <span class="keyword">and</span> <span class="keyword">not</span> shallow:  </span><br><span class="line">        self.environ[<span class="string">&quot;werkzeug.request&quot;</span>] = self</span><br></pre></td></tr></table></figure><p>从其初始化函数中我们可以看到，Request会从WSGIEnvironment中读取相关信息，例如REQUEST_METHOD等等。</p><h3 id="响应"><a class="markdownIt-Anchor" href="#响应"></a> 响应</h3><p>继续回到我们这一节的简单应用，假如客户端发送了一个GET类型的request，我们将返回一个<code>“A get request.”</code>字符串，返回的这个字符串是如何响应到客户端的呢？</p><p>我们回到“路由匹配”那个执行图的Flask.full_dispatch_request函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">full_dispatch_request</span>(<span class="params">self</span>) -&gt; Response:</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> self._got_first_request:  </span><br><span class="line">    <span class="keyword">with</span> self._before_request_lock:  </span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self._got_first_request:  </span><br><span class="line">            <span class="keyword">for</span> func <span class="keyword">in</span> self.before_first_request_funcs:  </span><br><span class="line">                self.ensure_sync(func)()    </span><br><span class="line">            self._got_first_request = <span class="literal">True</span>    </span><br><span class="line"><span class="keyword">try</span>:  </span><br><span class="line">    request_started.send(self)  </span><br><span class="line">    rv = self.preprocess_request()  </span><br><span class="line">    <span class="keyword">if</span> rv <span class="keyword">is</span> <span class="literal">None</span>:  </span><br><span class="line">        rv = self.dispatch_request()  </span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:  </span><br><span class="line">    rv = self.handle_user_exception(e)  </span><br><span class="line"><span class="keyword">return</span> self.finalize_request(rv)<span class="comment"># 最后将路由对应的视图函数执行结果进行处理</span></span><br></pre></td></tr></table></figure><p>在这个函数的最后，会把视图函数执行的结果传入finalize_request函数中进行处理。我们来看下这个函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">finalize_request</span>(<span class="params">  </span></span><br><span class="line"><span class="params">    self,  </span></span><br><span class="line"><span class="params">    rv: t.<span class="type">Union</span>[ft.ResponseReturnValue, HTTPException],  </span></span><br><span class="line"><span class="params">    from_error_handler: <span class="built_in">bool</span> = <span class="literal">False</span>,  </span></span><br><span class="line"><span class="params"></span>) -&gt; Response:</span><br><span class="line">response = self.make_response(rv)  </span><br><span class="line"><span class="keyword">try</span>:  </span><br><span class="line">    response = self.process_response(response)  </span><br><span class="line">    request_finished.send(self, response=response)  </span><br><span class="line"><span class="keyword">except</span> Exception:  </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> from_error_handler:  </span><br><span class="line">        <span class="keyword">raise</span>  </span><br><span class="line">    self.logger.exception(  </span><br><span class="line">        <span class="string">&quot;Request finalizing failed with an error while handling an error&quot;</span>  </span><br><span class="line">    )  </span><br><span class="line"><span class="keyword">return</span> response</span><br></pre></td></tr></table></figure><p>这个函数主要功能，先通过make_response创建出Response对象，然后执行process_response来对Response对象进行处理，例如执行hook函数等。</p><p>Response类位于flask.wrappers，其代码很少，主要功能还是在父类werkzeug.wrappers.response模块的Response类中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Response</span>(<span class="title class_ inherited__">_SansIOResponse</span>):</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">  </span></span><br><span class="line"><span class="params">    self,  </span></span><br><span class="line"><span class="params">    response: t.<span class="type">Optional</span>[  </span></span><br><span class="line"><span class="params">        t.<span class="type">Union</span>[t.Iterable[<span class="built_in">bytes</span>], <span class="built_in">bytes</span>, t.Iterable[<span class="built_in">str</span>], <span class="built_in">str</span>]  </span></span><br><span class="line"><span class="params">    ] = <span class="literal">None</span>,  </span></span><br><span class="line"><span class="params">    status: t.<span class="type">Optional</span>[t.<span class="type">Union</span>[<span class="built_in">int</span>, <span class="built_in">str</span>, HTTPStatus]] = <span class="literal">None</span>,  </span></span><br><span class="line"><span class="params">    headers: t.<span class="type">Optional</span>[  </span></span><br><span class="line"><span class="params">        t.<span class="type">Union</span>[  </span></span><br><span class="line"><span class="params">            t.Mapping[<span class="built_in">str</span>, t.<span class="type">Union</span>[<span class="built_in">str</span>, <span class="built_in">int</span>, t.Iterable[t.<span class="type">Union</span>[<span class="built_in">str</span>, <span class="built_in">int</span>]]]],  </span></span><br><span class="line"><span class="params">            t.Iterable[t.<span class="type">Tuple</span>[<span class="built_in">str</span>, t.<span class="type">Union</span>[<span class="built_in">str</span>, <span class="built_in">int</span>]]],  </span></span><br><span class="line"><span class="params">        ]  </span></span><br><span class="line"><span class="params">    ] = <span class="literal">None</span>,  </span></span><br><span class="line"><span class="params">    mimetype: t.<span class="type">Optional</span>[<span class="built_in">str</span>] = <span class="literal">None</span>,  </span></span><br><span class="line"><span class="params">    content_type: t.<span class="type">Optional</span>[<span class="built_in">str</span>] = <span class="literal">None</span>,  </span></span><br><span class="line"><span class="params">    direct_passthrough: <span class="built_in">bool</span> = <span class="literal">False</span>,  </span></span><br><span class="line"><span class="params"></span>) -&gt; <span class="literal">None</span>:  </span><br><span class="line">    <span class="built_in">super</span>().__init__(  </span><br><span class="line">        status=status,  </span><br><span class="line">        headers=headers,  </span><br><span class="line">        mimetype=mimetype,  </span><br><span class="line">        content_type=content_type,  </span><br><span class="line">    )</span><br><span class="line">    self.direct_passthrough = direct_passthrough  </span><br><span class="line">self._on_close: t.<span class="type">List</span>[t.<span class="type">Callable</span>[[], t.<span class="type">Any</span>]] = []</span><br><span class="line"><span class="keyword">if</span> response <span class="keyword">is</span> <span class="literal">None</span>:  </span><br><span class="line">    self.response = []  </span><br><span class="line"><span class="keyword">elif</span> <span class="built_in">isinstance</span>(response, (<span class="built_in">str</span>, <span class="built_in">bytes</span>, <span class="built_in">bytearray</span>)):  </span><br><span class="line">    self.set_data(response)  </span><br><span class="line"><span class="keyword">else</span>:  </span><br><span class="line">    self.response = response</span><br></pre></td></tr></table></figure><p>其初始化时会设置返回状态码、headers、数据等等。</p><h2 id="flask上下文管理"><a class="markdownIt-Anchor" href="#flask上下文管理"></a> Flask上下文管理</h2><p>我们在使用request的时候，发现有用到flask.globals模块，这里面主要有两块内容：Application Context及其全局变量、Request Context及其全局变量。Application Context是在启动app时会初始化的上下文对象，内部存放整体的信息；Request Context存放处理请求时的context，当该次请求处理完时也会销毁。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Application Context 内容</span></span><br><span class="line">_cv_app: ContextVar[<span class="string">&quot;AppContext&quot;</span>] = ContextVar(<span class="string">&quot;flask.app_ctx&quot;</span>)  </span><br><span class="line">__app_ctx_stack = _FakeStack(<span class="string">&quot;app&quot;</span>, _cv_app)  </span><br><span class="line">app_ctx: <span class="string">&quot;AppContext&quot;</span> = LocalProxy(  <span class="comment"># type: ignore[assignment]  </span></span><br><span class="line">    _cv_app, unbound_message=_no_app_msg  </span><br><span class="line">)  </span><br><span class="line">current_app: <span class="string">&quot;Flask&quot;</span> = LocalProxy(  <span class="comment"># type: ignore[assignment]  </span></span><br><span class="line">    _cv_app, <span class="string">&quot;app&quot;</span>, unbound_message=_no_app_msg  </span><br><span class="line">)  </span><br><span class="line">g: <span class="string">&quot;_AppCtxGlobals&quot;</span> = LocalProxy(  <span class="comment"># type: ignore[assignment]  </span></span><br><span class="line">    _cv_app, <span class="string">&quot;g&quot;</span>, unbound_message=_no_app_msg  </span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Request Context 内容</span></span><br><span class="line">_cv_request: ContextVar[<span class="string">&quot;RequestContext&quot;</span>] = ContextVar(<span class="string">&quot;flask.request_ctx&quot;</span>)  </span><br><span class="line">__request_ctx_stack = _FakeStack(<span class="string">&quot;request&quot;</span>, _cv_request)  </span><br><span class="line">request_ctx: <span class="string">&quot;RequestContext&quot;</span> = LocalProxy(  <span class="comment"># type: ignore[assignment]  </span></span><br><span class="line">    _cv_request, unbound_message=_no_req_msg  </span><br><span class="line">)  </span><br><span class="line">request: <span class="string">&quot;Request&quot;</span> = LocalProxy(  <span class="comment"># type: ignore[assignment]  </span></span><br><span class="line">    _cv_request, <span class="string">&quot;request&quot;</span>, unbound_message=_no_req_msg  </span><br><span class="line">)  </span><br><span class="line">session: <span class="string">&quot;SessionMixin&quot;</span> = LocalProxy(  <span class="comment"># type: ignore[assignment]  </span></span><br><span class="line">    _cv_request, <span class="string">&quot;session&quot;</span>, unbound_message=_no_req_msg  </span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>我们知道全局变量是不可改变的，因此Flask用到了werkzeug.local模块来实现这种类似全局变量的东西，同时兼顾了多线程。我们先来看下local模块的基础类Local：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Local</span>:</span><br><span class="line">__slots__ = (<span class="string">&quot;__storage&quot;</span>,)  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">  </span></span><br><span class="line"><span class="params">    self, context_var: t.<span class="type">Optional</span>[ContextVar[t.<span class="type">Dict</span>[<span class="built_in">str</span>, t.<span class="type">Any</span>]]] = <span class="literal">None</span>  </span></span><br><span class="line"><span class="params"></span>) -&gt; <span class="literal">None</span>:  </span><br><span class="line">    <span class="keyword">if</span> context_var <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    context_var = ContextVar(<span class="string">f&quot;werkzeug.Local&lt;<span class="subst">&#123;<span class="built_in">id</span>(self)&#125;</span>&gt;.storage&quot;</span>)</span><br><span class="line"><span class="built_in">object</span>.__setattr__(self, <span class="string">&quot;_Local__storage&quot;</span>, context_var)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">  </span></span><br><span class="line"><span class="params">    self, name: <span class="built_in">str</span>, *, unbound_message: t.<span class="type">Optional</span>[<span class="built_in">str</span>] = <span class="literal">None</span>  </span></span><br><span class="line"><span class="params"></span>) -&gt; <span class="string">&quot;LocalProxy&quot;</span>:</span><br><span class="line"><span class="keyword">return</span> LocalProxy(self, name, unbound_message=unbound_message)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__release_local__</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:  </span><br><span class="line">    self.__storage.<span class="built_in">set</span>(&#123;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__getattr__</span>(<span class="params">self, name: <span class="built_in">str</span></span>) -&gt; t.<span class="type">Any</span>:  </span><br><span class="line">    values = self.__storage.get(&#123;&#125;)  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> name <span class="keyword">in</span> values:  </span><br><span class="line">        <span class="keyword">return</span> values[name]  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">raise</span> AttributeError(name)  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__setattr__</span>(<span class="params">self, name: <span class="built_in">str</span>, value: t.<span class="type">Any</span></span>) -&gt; <span class="literal">None</span>:  </span><br><span class="line">    values = self.__storage.get(&#123;&#125;).copy()  </span><br><span class="line">    values[name] = value  </span><br><span class="line">    self.__storage.<span class="built_in">set</span>(values)</span><br></pre></td></tr></table></figure><p>Local通过self.__storage来存储数据，其本身是一个dict。context_var则根据类型可以传入AppContext或者RequestContext。线程安全主要通过LocalProxy来实现。</p><p>LocalStack类其实也类似，是一个线程安全的栈对象，也是通过LocalProxy来实现线程安全。</p><p>LocalProxy类：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LocalProxy</span>(t.<span class="type">Generic</span>[T]):</span><br><span class="line">__slots__ = (<span class="string">&quot;__wrapped&quot;</span>, <span class="string">&quot;_get_current_object&quot;</span>)  </span><br><span class="line">_get_current_object: t.<span class="type">Callable</span>[[], T]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">  </span></span><br><span class="line"><span class="params">    self,  </span></span><br><span class="line"><span class="params">    local: t.<span class="type">Union</span>[ContextVar[T], Local, LocalStack[T], t.<span class="type">Callable</span>[[], T]],  </span></span><br><span class="line"><span class="params">    name: t.<span class="type">Optional</span>[<span class="built_in">str</span>] = <span class="literal">None</span>,  </span></span><br><span class="line"><span class="params">    *,  </span></span><br><span class="line"><span class="params">    unbound_message: t.<span class="type">Optional</span>[<span class="built_in">str</span>] = <span class="literal">None</span>,  </span></span><br><span class="line"><span class="params"></span>) -&gt; <span class="literal">None</span>:  </span><br><span class="line">    <span class="keyword">if</span> name <span class="keyword">is</span> <span class="literal">None</span>:  </span><br><span class="line">        get_name = _identity  </span><br><span class="line">    <span class="keyword">else</span>:  </span><br><span class="line">        get_name = attrgetter(name)  <span class="comment"># type: ignore[assignment]  </span></span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> unbound_message <span class="keyword">is</span> <span class="literal">None</span>:  </span><br><span class="line">        unbound_message = <span class="string">&quot;object is not bound&quot;</span>  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(local, Local):  </span><br><span class="line">        <span class="keyword">if</span> name <span class="keyword">is</span> <span class="literal">None</span>:  </span><br><span class="line">            <span class="keyword">raise</span> TypeError(<span class="string">&quot;&#x27;name&#x27; is required when proxying a &#x27;Local&#x27; object.&quot;</span>)    </span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">_get_current_object</span>() -&gt; T:  </span><br><span class="line">            <span class="keyword">try</span>:  </span><br><span class="line">                <span class="keyword">return</span> get_name(local)  <span class="comment"># type: ignore[<span class="keyword">return</span>-value]  </span></span><br><span class="line">            <span class="keyword">except</span> AttributeError:  </span><br><span class="line">                <span class="keyword">raise</span> RuntimeError(unbound_message) <span class="keyword">from</span> <span class="literal">None</span>  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">isinstance</span>(local, LocalStack):    </span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">_get_current_object</span>() -&gt; T:  </span><br><span class="line">            obj = local.top  <span class="comment"># type: ignore[union-attr]    </span></span><br><span class="line">            <span class="keyword">if</span> obj <span class="keyword">is</span> <span class="literal">None</span>:  </span><br><span class="line">                <span class="keyword">raise</span> RuntimeError(unbound_message)    </span><br><span class="line">            <span class="keyword">return</span> get_name(obj)  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">isinstance</span>(local, ContextVar):    </span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">_get_current_object</span>() -&gt; T:  </span><br><span class="line">            <span class="keyword">try</span>:  </span><br><span class="line">                obj = local.get()  <span class="comment"># type: ignore[union-attr]  </span></span><br><span class="line">            <span class="keyword">except</span> LookupError:  </span><br><span class="line">                <span class="keyword">raise</span> RuntimeError(unbound_message) <span class="keyword">from</span> <span class="literal">None</span>    </span><br><span class="line">            <span class="keyword">return</span> get_name(obj)  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">callable</span>(local):  </span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">_get_current_object</span>() -&gt; T:  </span><br><span class="line">            <span class="keyword">return</span> get_name(local())  <span class="comment"># type: ignore    </span></span><br><span class="line">    <span class="keyword">else</span>:  </span><br><span class="line">        <span class="keyword">raise</span> TypeError(<span class="string">f&quot;Don&#x27;t know how to proxy &#x27;<span class="subst">&#123;<span class="built_in">type</span>(local)&#125;</span>&#x27;.&quot;</span>)  </span><br><span class="line">  </span><br><span class="line">    <span class="built_in">object</span>.__setattr__(self, <span class="string">&quot;_LocalProxy__wrapped&quot;</span>, local)  </span><br><span class="line">    <span class="built_in">object</span>.__setattr__(self, <span class="string">&quot;_get_current_object&quot;</span>, _get_current_object)  </span><br><span class="line"> </span><br><span class="line">__wrapped__ = _ProxyLookup(  </span><br><span class="line">    fallback=<span class="keyword">lambda</span> self: self._LocalProxy__wrapped, is_attr=<span class="literal">True</span>  </span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>LocalProxy主要起到获取当前Local对象，然后将对自己的操作转发给这个Local对象。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;概述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#概述&quot;&gt;&lt;/a&gt; 概述&lt;/h2&gt;
&lt;p&gt;Flask核心功能依赖于两个库：Jinja和Werkzeug。前者作为Flask的模版（Template）引擎，提供了Flask创建模版以及相关</summary>
      
    
    
    
    <category term="后端" scheme="http://example.com/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="Flask" scheme="http://example.com/tags/Flask/"/>
    
  </entry>
  
  <entry>
    <title>Flask建站自用标配</title>
    <link href="http://example.com/2023/01/25/Flask%E5%BB%BA%E7%AB%99%E8%87%AA%E7%94%A8%E6%A0%87%E9%85%8D/"/>
    <id>http://example.com/2023/01/25/Flask%E5%BB%BA%E7%AB%99%E8%87%AA%E7%94%A8%E6%A0%87%E9%85%8D/</id>
    <published>2023-01-25T06:54:31.000Z</published>
    <updated>2023-01-25T06:54:31.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a class="markdownIt-Anchor" href="#简介"></a> 简介</h2><p>一套自己在部署Python开发的后端服务时常用的架构，简单做个记录。</p><h2 id="一图流"><a class="markdownIt-Anchor" href="#一图流"></a> 一图流</h2><div align=center><img src="https://i.328888.xyz/2023/01/25/bHdBA.png" /></div><h2 id="入口"><a class="markdownIt-Anchor" href="#入口"></a> 入口</h2><p>请求直接打到nginx。虽说直接用nginx作为入口，一旦nginx挂了整个服务就挂了。但由于目前参与部署的服务大多是公司、部门内部使用的服务，或者是自己搭着玩的web站点，机器资源有限（一般就只有一台），因此单点挂了就挂了。</p><p>如果是有个集群的情况下，可以通过Keepalived来应对nginx单点故障的问题。</p><p>在我目前的场景中，nginx主要起到：</p><ol><li>处理静态请求展示前端页面；</li><li>内部域名映射；</li><li>多个服务的统一入口管理。</li></ol><h2 id="应用服务器"><a class="markdownIt-Anchor" href="#应用服务器"></a> 应用服务器</h2><p>Flask、Django开发的应用直接用命令行跑起来，其他人当然也是可以调用的。但假如你这个服务使用的人多了起来，Flask等自带的wsgi性能就不那么好了。uWSGI、Gunicorn这类wsgi server可以提供更好的并发性能支持。</p><p><a href="https://csrgxtu.github.io/2020/03/08/WSGI-%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90/">《WSGI 服务器性能分析》</a>中对比了比较出名的几款wsgi工具的性能，这里我常用的是Gunicorn。</p><h2 id="web框架"><a class="markdownIt-Anchor" href="#web框架"></a> Web框架</h2><p>个人更喜欢Flask，相对Django而言更精简。不过这部分用什么框架还是看实际场景和需求，还有开发人员的熟练程度吧。</p><h2 id="监控管理"><a class="markdownIt-Anchor" href="#监控管理"></a> 监控管理</h2><p>一方面Gunicorn重启关闭麻烦，另一方面我们又希望如果服务进程因为内部错误等原因挂了，还能够自己重新启动，不妨碍继续使用。因此supervisor的引入是非常有必要的。</p><p>supervisor可以起到以下几个作用：</p><ol><li>简单配置之后可以非常方便的进行Gunicorn进程的启动、重启、关闭；</li><li>可以查看Gunicorn的执行状态；</li><li>可以配置挂掉的进程自动重启。</li></ol><h2 id="cicd"><a class="markdownIt-Anchor" href="#cicd"></a> CI/CD</h2><p>这部分其实就是自动更新部署的内容，最开始的时候是直接写个shell脚本去进行服务端项目的更新、重启，后来使用Fabric比较多，其实Fabric实质上还是在跑shell等命令。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;简介&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#简介&quot;&gt;&lt;/a&gt; 简介&lt;/h2&gt;
&lt;p&gt;一套自己在部署Python开发的后端服务时常用的架构，简单做个记录。&lt;/p&gt;
&lt;h2 id=&quot;一图流&quot;&gt;&lt;a class=&quot;markdownIt</summary>
      
    
    
    
    <category term="后端" scheme="http://example.com/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="Flask" scheme="http://example.com/tags/Flask/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2023/01/23/hello-world/"/>
    <id>http://example.com/2023/01/23/hello-world/</id>
    <published>2023-01-23T07:46:04.068Z</published>
    <updated>2023-01-23T13:34:35.232Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="quick-start"><a class="markdownIt-Anchor" href="#quick-start"></a> Quick Start</h2><h3 id="create-a-new-post"><a class="markdownIt-Anchor" href="#create-a-new-post"></a> Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="run-server"><a class="markdownIt-Anchor" href="#run-server"></a> Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="generate-static-files"><a class="markdownIt-Anchor" href="#generate-static-files"></a> Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="deploy-to-remote-sites"><a class="markdownIt-Anchor" href="#deploy-to-remote-sites"></a> Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    <category term="blog" scheme="http://example.com/categories/blog/"/>
    
    
    <category term="blog" scheme="http://example.com/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>Android so文件的加解密</title>
    <link href="http://example.com/2022/12/14/Android-so%E6%96%87%E4%BB%B6%E7%9A%84%E5%8A%A0%E8%A7%A3%E5%AF%86/"/>
    <id>http://example.com/2022/12/14/Android-so%E6%96%87%E4%BB%B6%E7%9A%84%E5%8A%A0%E8%A7%A3%E5%AF%86/</id>
    <published>2022-12-14T14:10:02.000Z</published>
    <updated>2023-01-23T13:34:02.791Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>Android so加载和dump</title>
    <link href="http://example.com/2022/11/27/Android-so%E5%8A%A0%E8%BD%BD%E5%92%8Cdump/"/>
    <id>http://example.com/2022/11/27/Android-so%E5%8A%A0%E8%BD%BD%E5%92%8Cdump/</id>
    <published>2022-11-27T10:39:13.000Z</published>
    <updated>2023-01-24T12:07:35.070Z</updated>
    
    <content type="html"><![CDATA[<h2 id="加载"><a class="markdownIt-Anchor" href="#加载"></a> 加载</h2><h3 id="elf文件介绍"><a class="markdownIt-Anchor" href="#elf文件介绍"></a> ELF文件介绍</h3><p>ELF文件是Unix中的ABI。Linux中的执行文件基本都是ELF文件，同样Android和iOS中也如此。其主要有四种类型：</p><ol><li>可重定位文件（Relocatable File）包含适合于与其他目标文件链接来创建可执行文件或者共享目标文件的代码和数据，即 xxx.o 文件。</li><li>可执行文件（Executable File）包含适合于执行的一个程序，此文件规定了 exec() 如何创建一个程序的进程映像，即 a.out文件。</li><li>共享目标文件（Shared Object File）包含可在两种上下文中链接的代码和数据。首先链接编辑器可以将它和其它可重定位文件和共享目标文件一起处理，生成另外一个目标文件。其次，动态链接器（Dynamic Linker）可能将它与某个可执行文件以及其它共享目标一起组合，创建进程映像，即 xxx.so文件。</li><li>内核转储(core dumps)，存放当前进程的执行上下文，用于dump信号触发。</li></ol><p>我们可以通过readelf工具查看ELF文件的相关信息，或者使用010 editor等工具进行查看。<br />ELF文件通常由以下几部分组成：</p><ol><li>ELF头（ELF Header）：位于文件开始位置。用于描述文件主要特性，包括魔数、架构、程序头标偏移、节头表偏移等。</li><li>程序头表（Program Header Table）：位于ELF Header之后。列举了所有有效的段（Segment）以及他们的属性。</li><li>节头表（Section Header Table）：位于文件的末尾。列举了所有节（Section）以及他们的属性。</li></ol><h3 id="elf文件加载"><a class="markdownIt-Anchor" href="#elf文件加载"></a> ELF文件加载</h3><div align=center><img src="https://i.328888.xyz/2023/01/24/bU0Rt.png" /></div><p>ELF文件有两种试图模式，“链接视图（Linkable）”和“执行视图（Executable）”，其中链接视图以节（Section）为单位，执行视图以（Segment）为单位。</p><p>举个例子，假如我们有多个可重定位文件，即xxx.o文件，这些文件内部都是section，例如.text、.rodata等。当要链接成执行文件时，各个section就会合并成segment，主要是为了执行时方便加载。</p><p>加载ELF时的系统调用函数流程如下，处理函数为load_elf_binary：</p><div align=center><img src="https://i.328888.xyz/2023/01/24/bUtKP.png" /></div><p>load_elf_binary大致流程是：</p><ol><li>读取并检查目标程序的ELF头</li><li>加载目标程序的Program Header Table</li><li>处理动态链接，即解释器段（<a href="http://xn--Linuxld-linux-773u49bl015a.so">Linux会使用ld-linux.so</a>，Android是linker）</li><li>加载必须的Segment，即类型为PT_LOAD的Segment</li><li>填入程序的入口地址</li><li>设置目标函数的参数、环境变量等必要信息</li><li>调用start_thread准备执行函数</li></ol><h3 id="android中so的加载"><a class="markdownIt-Anchor" href="#android中so的加载"></a> Android中so的加载</h3><p>安卓中APP进程加载so文件是通过Java层函数System.loadLibrary()去加载，实际上在调用链底层还是调用了dlopen，然后用dlsym去找JNI_OnLoad的符号，找到后再执行JNI_OnLoad。查看Linker源码，dlopen返回一个soinfo结构体指针。</p><div align=center><img src="https://i.328888.xyz/2023/01/24/bUkUX.jpeg" /></div><h2 id="dump"><a class="markdownIt-Anchor" href="#dump"></a> dump</h2><h3 id="mem-dump"><a class="markdownIt-Anchor" href="#mem-dump"></a> Mem dump</h3><p>Dump so文件即从内存中把so文件保存到本地，一般是逆向分析时遇到了so文件被静态加固了，所以尝试dump的方式意图还原后的so文件。因为一般情况下so的还原会在加载时完成，所以加载到内存之后的so大概率是还原了的。</p><p>dump的方法还是非常简单的，这里贴一个用Frida来dump的例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">dump_so</span>(<span class="params"></span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">var</span> libso = <span class="title class_">Process</span>.<span class="title function_">findModuleByName</span>(<span class="string">&quot;libtest.so&quot;</span>);</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[dump] Find module: &quot;</span> + libso.<span class="property">name</span>);</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[dump] Start addr: &quot;</span> + libso.<span class="property">base</span>);</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[dump] So size: &quot;</span> + libso.<span class="property">size</span>);</span><br><span class="line">                <span class="keyword">if</span> (libso)&#123;</span><br><span class="line">                    <span class="title class_">Memory</span>.<span class="title function_">protect</span>(<span class="title function_">ptr</span>(libso.<span class="property">base</span>), libso.<span class="property">size</span>, <span class="string">&#x27;rwx&#x27;</span>);</span><br><span class="line">                    <span class="keyword">var</span> libso_buffer = <span class="title function_">ptr</span>(libso.<span class="property">base</span>).<span class="title function_">readByteArray</span>(libso.<span class="property">size</span>);</span><br><span class="line">                    <span class="keyword">var</span> file_path = <span class="string">&quot;/data/local/tmp/&quot;</span> + libso.<span class="property">name</span> + <span class="string">&quot;.so&quot;</span>;</span><br><span class="line">                    <span class="keyword">var</span> file_handle = <span class="keyword">new</span> <span class="title class_">File</span>(file_path, <span class="string">&quot;wb&quot;</span>);</span><br><span class="line">                    file_handle.<span class="title function_">write</span>(libso_buffer);</span><br><span class="line">                    file_handle.<span class="title function_">flush</span>();</span><br><span class="line">                    file_handle.<span class="title function_">close</span>();</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[dump] Finish dump: &quot;</span>, file_path);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">setImmediate</span>(dump_so);</span><br></pre></td></tr></table></figure><h3 id="跨进程dump"><a class="markdownIt-Anchor" href="#跨进程dump"></a> 跨进程dump</h3><p>process_vm_readv</p><h3 id="处理反so-dump"><a class="markdownIt-Anchor" href="#处理反so-dump"></a> 处理反so dump</h3><p>很多商业软件都会做内存防护，特别是游戏领域，通过内存防修改、防搜索、防dump等等，来抵制外挂。这里不以破解为目的，从学习的角度上来浅谈一下如何绕过so dump检测。</p><h4 id="inotify检测及绕过"><a class="markdownIt-Anchor" href="#inotify检测及绕过"></a> inotify检测及绕过</h4><p>inotify是Linux提供的监控文件系统的变化的接口，这种变化包括文件被访问、修改、读写权限修改等等。因此，当破解者有时进行内存dump时，可能会对文件的权限进行修改（例如从不可读改成可读），这个时候就可以通过inotify进行检测。有不少商业方案就用的inotify，例如这个梆梆加固的反dump。<br />这种情况下通常思路是查找inotify的调用函数，然后对逻辑进行修改，例如修改返回值。</p><h4 id="so在内存不连续"><a class="markdownIt-Anchor" href="#so在内存不连续"></a> so在内存不连续</h4><p>之前遇到过游戏主模块so文件在内存中是不连续的，整个so文件被拆分成多段分别分布。这种情况下的处理方法基本是将每一段都dump下来然后再做修复。</p><h4 id="so数据修改"><a class="markdownIt-Anchor" href="#so数据修改"></a> so数据修改</h4><p>这种情况也是比较常见的，因为相对而言修改so数据的成本会比较低。我们通过对so的加载分析发现，在so加载时是使用的“执行视图”，因此部分section相关的字段是没用的，例如e_shoff、e_shnum等Section Header相关字段。而偏偏我们在逆向分析时，这些字段非常重要，因为IDA等反汇编工具需要Section相关信息去定位和加载各个Section，所以这些字段修改过后IDA就会加载失败。</p><p>如果我们dump下来的是有问题的，可以尝试通过dynamic段去尽可能还原一些section的信息，从而得到一个IDA可分析的so文件。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;加载&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#加载&quot;&gt;&lt;/a&gt; 加载&lt;/h2&gt;
&lt;h3 id=&quot;elf文件介绍&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#elf文件介绍&quot;&gt;&lt;/a&gt; ELF文件介绍&lt;</summary>
      
    
    
    
    <category term="安全" scheme="http://example.com/categories/%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="Android" scheme="http://example.com/tags/Android/"/>
    
    <category term="dump" scheme="http://example.com/tags/dump/"/>
    
  </entry>
  
  <entry>
    <title>Android zygote注入</title>
    <link href="http://example.com/2022/11/19/Android-zygote%E6%B3%A8%E5%85%A5/"/>
    <id>http://example.com/2022/11/19/Android-zygote%E6%B3%A8%E5%85%A5/</id>
    <published>2022-11-19T09:22:25.000Z</published>
    <updated>2023-01-24T11:50:51.574Z</updated>
    
    <content type="html"><![CDATA[<h2 id="zygote介绍"><a class="markdownIt-Anchor" href="#zygote介绍"></a> zygote介绍</h2><p>安卓开机流程：</p><div align=center><img src="https://i.328888.xyz/2023/01/24/bDe5c.png" /></div><p>Zygote进程在Init进程启动过程中被以service服务的形式启动，也就是通过app_process程序启动。app_process程序代码对应的就是app_main.cpp。</p><p>Zygote的主要作用：</p><ol><li>启动dalvik虚拟机（dalvik进程是zygote fork的）</li><li>加载系统必须的一些资源</li><li>启动framework的SystemServer进程（SystemServer进程是zygote fork的）</li><li>等待创建应用进程的请求</li></ol><div align=center><img src="https://i.328888.xyz/2023/01/24/bD7Dt.png" /></div><h2 id="zygote注入流程"><a class="markdownIt-Anchor" href="#zygote注入流程"></a> zygote注入流程</h2><p>我们从上一节的Android应用进程共享可见，Zygote fork出的进程都继承了Zygote内存空间，因此如果我们将模块注入Zygote进程，也同样会被其fork出的进程继承。</p><p>流程基本可以参考《Android ptrace注入》，注入对象变成了zygote进程。</p><h2 id="代码实现"><a class="markdownIt-Anchor" href="#代码实现"></a> 代码实现</h2><p>使用《Android ptrace注入》的代码即可。</p><h2 id="实验结果"><a class="markdownIt-Anchor" href="#实验结果"></a> 实验结果</h2><p>zygote注入libtest：</p><div align=center><img src="https://i.328888.xyz/2023/01/24/bDgJX.png" /></div><p>fork出的进程也载入了libtest：</p><div align=center><img src="https://i.328888.xyz/2023/01/24/bDErJ.png" /></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;zygote介绍&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#zygote介绍&quot;&gt;&lt;/a&gt; zygote介绍&lt;/h2&gt;
&lt;p&gt;安卓开机流程：&lt;/p&gt;
&lt;div align=center&gt;
&lt;img src=&quot;https://i.328</summary>
      
    
    
    
    <category term="安全" scheme="http://example.com/categories/%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="Android" scheme="http://example.com/tags/Android/"/>
    
    <category term="注入" scheme="http://example.com/tags/%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>Android ptrace注入</title>
    <link href="http://example.com/2022/11/18/Android-ptrace%E6%B3%A8%E5%85%A5/"/>
    <id>http://example.com/2022/11/18/Android-ptrace%E6%B3%A8%E5%85%A5/</id>
    <published>2022-11-18T14:23:43.000Z</published>
    <updated>2023-01-24T11:37:47.034Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ptrace介绍"><a class="markdownIt-Anchor" href="#ptrace介绍"></a> ptrace介绍</h2><p>ptrace是Liunx系统的一个用来追踪进程的系统调用，功能是提供了一个进程可以观察、控制另一个进程的内存和寄存器。</p><p>其基本原理是，当一个进程A使用ptrace了进程B之后，发送给B的所有信号（除了SIGKILL）都会被转发给A，同时B会被堵塞，并且B的状态会被系统标识为TASK_TRACED。A收到发送给B的信号之后，可以对阻塞中的B进行检查和修改，之后再让B继续执行。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ptrace.h&gt;</span></span></span><br><span class="line"><span class="type">long</span> <span class="title function_">ptrace</span><span class="params">(<span class="keyword">enum</span> __ptrace_request request, <span class="type">pid_t</span> pid, <span class="type">void</span> *addr, <span class="type">void</span> *data)</span>;</span><br></pre></td></tr></table></figure><p>ptrace函数有四个参数：</p><ul><li>request：决定了ptrace要执行的命令；</li><li>pid：为要追踪的进程id；</li><li>addr：为要操作的内存地址；</li><li>data：为存放读取出的或者要写入的数据。</li></ul><p>其中request有一些常见指令：</p><table><thead><tr><th style="text-align:left">指令</th><th style="text-align:left">含义</th></tr></thead><tbody><tr><td style="text-align:left">PTRACE_ATTACH</td><td style="text-align:left">附加指定的pid进程</td></tr><tr><td style="text-align:left">PTRACE_DETACH</td><td style="text-align:left">结束对指定的pid进程附加</td></tr><tr><td style="text-align:left">PTRACE_GETREGS\PTRACE_GETFPREGS</td><td style="text-align:left">获取指定pid进程的普通\浮点寄存器值到data中</td></tr><tr><td style="text-align:left">PTRACE_SETREGS\PTRACE_SETFPREGS</td><td style="text-align:left">将data中的寄存器值设置到指定pid进程中</td></tr><tr><td style="text-align:left">PTRACE_PEEKTEXT</td><td style="text-align:left">将指定pid进程中地址为addr的内存数据读取一个字(word)到data中</td></tr><tr><td style="text-align:left">PTRACE_POKETEXT</td><td style="text-align:left">将data中的一个字长度的数据写入到指定pid进程中地址为addr的内存里</td></tr></tbody></table><p>其他详细信息可见：<a href="https://www.tutorialspoint.com/unix_system_calls/ptrace.htm">https://www.tutorialspoint.com/unix_system_calls/ptrace.htm</a></p><h2 id="ptrace注入流程"><a class="markdownIt-Anchor" href="#ptrace注入流程"></a> ptrace注入流程</h2><div align=center><img src="https://i.328888.xyz/2023/01/24/bAPWP.png" width="150" height="" /></div><p>简单来说：</p><ol><li>ptrace attach到远程进程；</li><li>获取并保存寄存器环境；</li><li>计算并获取远程进程的mmap、dlopen、dlsym等关键函数的地址；</li><li>使用ptrace写入需要的参数和内存，并修改pc寄存器的值为远程进程目标的值；</li><li>远程进程内调用dlopen动态链接要注入的so文件；</li><li>远程进程内调用dlsym执行被注入so文件的入口函数；</li><li>恢复寄存器环境；</li><li>从远程进程detach。</li></ol><h2 id="代码实现"><a class="markdownIt-Anchor" href="#代码实现"></a> 代码实现</h2><p><a href="https://github.com/Seventysix/android-ptrace-inject">https://github.com/Seventysix/android-ptrace-inject</a></p><h2 id="实验结果"><a class="markdownIt-Anchor" href="#实验结果"></a> 实验结果</h2><p>针对64位执行的UE4 demo游戏进行了注入，结果成功：<br />命令行输出：</p><div align=center><img src="https://i.328888.xyz/2023/01/24/bATpX.png"/></div><p>动态调试，so成功注入：</p><div align=center><img src="https://i.328888.xyz/2023/01/24/bAKEE.png"/></div><p>调用libtest.so的hook_entry函数执行成功：</p><div align=center><img src="https://i.328888.xyz/2023/01/24/bALTC.png"/></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;ptrace介绍&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#ptrace介绍&quot;&gt;&lt;/a&gt; ptrace介绍&lt;/h2&gt;
&lt;p&gt;ptrace是Liunx系统的一个用来追踪进程的系统调用，功能是提供了一个进程可以观察、控制另一个进程的内存</summary>
      
    
    
    
    <category term="安全" scheme="http://example.com/categories/%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="Android" scheme="http://example.com/tags/Android/"/>
    
    <category term="注入" scheme="http://example.com/tags/%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
</feed>
